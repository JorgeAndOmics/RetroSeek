#!/usr/bin/env python3

# -------------------
# DEPENDENCIES
# -------------------

import os
import subprocess
import argparse
from pathlib import Path


# -----------------------------
# MAIN ENTRY POINT
# -----------------------------

if __name__ == '__main__':
    # -----------------------------
    # PARSE COMMAND-LINE ARGUMENTS
    # -----------------------------
    parser = argparse.ArgumentParser(
        description='RetroSeek: A tool for directed ERV detection and analysis.'
    )

    parser.add_argument(
        '-f',
        '--full_analysis',
        action='store_true',
        help='Run complete pipeline.'
    )

    parser.add_argument(
        '-d',
        '--download_genomes',
        action='store_true',
        help="Downloads genomes specified in .yaml file. "
             "Will skip download if the same files exist currently in the target directory"
    )

    parser.add_argument(
        '-dhmm',
        '--download_hmm',
        action='store_true',
        help="Setup domain database"
    )

    parser.add_argument(
        '-s',
        '--suffix_arrays',
        action='store_true',
        help="Generate GenomeTools suffix arrays for genomes."
    )

    parser.add_argument(
        '-ltr',
        '--ltr_candidates',
        action='store_true',
        help="Generates LTR candidate files for genomes via LTRHarvest."
    )

    parser.add_argument(
        '-ltrd',
        '--ltr_domains',
        action='store_true',
        help="Generates domain-enriched LTR candidate files for genomes via LTRDigest."
    )

    parser.add_argument(
        '-bdb',
        '--blast_dbs',
        action='store_true',
        help="Generates BLAST databases from genomes."
    )

    parser.add_argument(
        '-ps',
        '--probe_extractor',
        action='store_true',
        help="Parses input CSV file and retrieves proviral sequences from provided NCBI accesion IDs."
    )

    parser.add_argument(
        '-b',
        '--blast',
        action='store_true',
        help="Runs tBLASTn of provided sequences against genome databases."
    )

    parser.add_argument(
        '-r',
        '--ranges_analysis',
        action='store_true',
        help="Performs genomic range integration of BLAST and LTR candidate results."
    )

    parser.add_argument(
        '-p',
        '--generate_global_plots',
        action='store_true',
        help='Generate plots from the analysis.'
    )

    parser.add_argument(
        '-c',
        '--generate_circle_plots',
        action='store_true',
        help='Generate circle plots from the species in analysis.'
    )

    parser.add_argument(
        '-hd',
        '--hotspot_detection',
        action='store_true',
        help='Perform ERV hotspot detection.'
    )

    parser.add_argument(
        '-skp',
        '--skip_validation',
        action='store_true',
        help='Skip input validation.'
    )

    args, unknown = parser.parse_known_args()

    # -----------------------------
    # DEFINE SCRIPT EXECUTION PATH
    # -----------------------------
    script_dir = Path(__file__).resolve().parent / 'workflow'

    # -----------------------------
    # EXECUTE MAIN PIPELINE
    # -----------------------------
    main_cmd: list = ['python', 'scripts/main.py']

    if args.skip_validation:
        main_cmd.append('--skip_validation')

    if args.full_analysis:
        main_cmd.append('--full_analysis')

    if args.download_genomes:
        main_cmd.append('--download_genomes')

    if args.download_hmm:
        main_cmd.append('--download_hmm')

    if args.suffix_arrays:
        main_cmd.append('--suffix_arrays')

    if args.ltr_candidates:
        main_cmd.append('--ltr_candidates')

    if args.ltr_domains:
        main_cmd.append('--ltr_domains')

    if args.blast_dbs:
        main_cmd.append('--blast_dbs')

    if args.blast:
        main_cmd.append('--blast')

    if args.ranges_analysis:
        main_cmd.append('--ranges_analysis')

    if args.generate_global_plots:
        main_cmd.append('--generate_global_plots')

    if args.generate_circle_plots:
        main_cmd.append('--generate_circle_plots')

    if args.hotspot_detection:
        main_cmd.append('--hotspot_detection')

    if unknown:
        main_cmd.extend(unknown)

    subprocess.run(main_cmd, cwd=script_dir)
