theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot1
plot1 <- ggplot(data, aes(x=Family)) +
geom_bar() +
facet_grid(.~Species) +
geom_bar(fill = "steelblue") +
labs(title = "Distribution of Virus Families",
x = "Virus Family",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
plot1
plot1 <- ggplot(data, aes(x=Family)) +
geom_bar() +
facet_grid(.~Species) +
geom_bar(fill = "steelblue") +
theme_minimal() +
labs(title = "Distribution of Virus Families",
x = "Virus Family",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot1
probe_counts <- data %>%
count(Probe) %>%
mutate(proportion = n / sum(n))
library(readr)
library(dplyr)
library(ggplot2)
probe_counts <- data %>%
count(Probe) %>%
mutate(proportion = n / sum(n))
probe_counts <- data %>%
count(Probe) %>%
mutate(proportion = n / sum(n))
plot2 <- ggplot(probe_counts, aes(x = "", y = proportion, fill = Probe)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Proportion of Probe Types") +
theme(legend.position = "right")
plot2
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
install.packages("ggmosaic")
library(ggmosaic)
plot4 <- ggplot(data) +
geom_mosaic(aes(weight = 1, x = product(Family), fill = Probe)) +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Count",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot4
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
facet_grid(.~Species) +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = Species, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
facet_grid(.~Species) +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
facet_grid(.~Species) +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
facet_grid(.~Family) +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
facet_grid(.~Virus) +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probes within each Family-Species combination
probe_family_species_counts <- data %>%
count(Family, Species, Probe) %>%
group_by(Family, Species) %>%
mutate(proportion = n / sum(n))
ggplot(probe_family_species_counts, aes(x = Species, y = proportion, fill = Probe, group = Family)) +
geom_area(position = "stack", alpha = 0.8) +
facet_wrap(~ Family, scales = "free_x") +
theme_minimal() +
labs(title = "Distribution of Probes across Families and Species",
x = "Species",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Virus.Abbreviation, Probe) %>%
group_by(Virus.Abbreviation) %>%
mutate(proportion = n / sum(n))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe) %>%
group_by(Virus.Abbreviation) %>%
mutate(proportion = n / sum(n))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe) %>%
group_by(Abbreviation) %>%
mutate(proportion = n / sum(n))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe) %>%
group_by(Abbreviation) %>%
mutate(proportion = n / sum(n))
ggplot(probe_virus_counts, aes(x = Abbreviation, y = proportion, fill = Probe, group = Probe)) +
geom_area(position = "stack", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution of Probes across Different Viruses",
x = "Virus",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe) %>%
group_by(Abbreviation) %>%
mutate(proportion = n / sum(n))
ggplot(probe_virus_counts, aes(x = Abbreviation, y = proportion, fill = Probe, group = Probe)) +
geom_polygon(position = "stack", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution of Probes across Different Viruses",
x = "Virus",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot4 <- ggplot(data, aes(x=Abbreviation, y=n)) +
geom_boxplot()
plot4 <- ggplot(data, aes(x=Abbreviation, y=n)) +
geom_boxplot()
plot4
plot4 <- ggplot(data, aes(x=Abbreviation)) +
geom_boxplot()
plot4
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe)
ggplot(probe_virus_counts, aes(x = Abbreviation, y = n, fill = Probe)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Distribution of Probe Findings Across Viruses",
x = "Virus Abbreviation",
y = "Number of Findings",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "fill") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe)
ggplot(probe_virus_counts, aes(x = Abbreviation, y = n, color = Probe)) +
geom_point(size = 3, position = position_jitter(width = 0.2, height = 0)) +
theme_minimal() +
labs(title = "Distribution of Probe Findings Across Viruses",
x = "Virus Abbreviation",
y = "Number of Findings",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
probe_counts <- data %>%
count(Probe) %>%
mutate(proportion = n / sum(n))
plot2 <- ggplot(probe_counts, aes(x = "", y = proportion, fill = Probe)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Full Proportion of Probe Types") +
theme(legend.position = "right")
plot2
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "count", position = "stack") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probe types within each Family
probe_family_counts <- data %>%
count(Family, Probe)
# Create the stacked bar plot
plot3 <- ggplot(probe_family_counts, aes(x = Family, y = n, fill = Probe)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Relative Abundance of Probes Related to Families",
x = "Virus Family",
y = "Proportion",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3
# Summarize the data to get counts of Probes within each Virus and Family
heatmap_data <- data %>%
count(Abbreviation, Family, Probe)
# Create the heatmap
ggplot(heatmap_data, aes(x = Abbreviation, y = Family, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
labs(title = "Heatmap of Probe Counts Across Virus Abbreviations and Families",
x = "Virus Abbreviation",
y = "Family",
fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus Abbreviation
faceted_data <- data %>%
count(Abbreviation, Probe, Family)
# Create the faceted bar plot
ggplot(faceted_data, aes(x = Abbreviation, y = n, fill = Probe)) +
geom_bar(stat = "identity") +
facet_wrap(~ Family, scales = "free_x") +
theme_minimal() +
labs(title = "Count of Probes for Each Virus Abbreviation by Family",
x = "Virus Abbreviation",
y = "Count",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus Abbreviation
faceted_data <- data %>%
count(Abbreviation, Probe, Family)
# Create the faceted bar plot
ggplot(faceted_data, aes(x = Abbreviation, y = n, fill = Probe)) +
geom_bar(stat = "identity") +
facet_wrap(~ Family, scales = "free_x") +
theme_minimal() +
labs(title = "Count of Probes for Each Virus Abbreviation by Family",
x = "Virus Abbreviation",
y = "Count",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus Abbreviation and Species
bubble_data <- data %>%
count(Abbreviation, Species, Probe)
# Create the bubble plot
ggplot(bubble_data, aes(x = Abbreviation, y = Species, size = n, color = Probe)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Bubble Plot of Probe Distribution Across Virus Abbreviations and Species",
x = "Virus Abbreviation",
y = "Species",
size = "Count",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus Abbreviation
violin_data <- data %>%
count(Abbreviation, Probe)
# Create the violin plot
ggplot(violin_data, aes(x = Abbreviation, y = n, fill = Probe)) +
geom_violin() +
theme_minimal() +
labs(title = "Violin Plot of Probe Counts by Virus Abbreviation",
x = "Virus Abbreviation",
y = "Count",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe)
plot4 <- ggplot(probe_virus_counts, aes(x = Abbreviation, y = n, color = Probe)) +
geom_point(size = 3, position = position_jitter(width = 0.2, height = 0))+
theme_minimal() +
labs(title = "Distribution of Probe Findings Across Viruses",
x = "Virus Abbreviation",
y = "Number of Findings",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to get counts of Probes within each Virus
probe_virus_counts <- data %>%
count(Abbreviation, Probe)
plot4 <- ggplot(probe_virus_counts, aes(x = Abbreviation, y = n, color = Probe)) +
geom_point(size = 3, position = position_jitter(width = 0.2, height = 0))+
theme_minimal() +
labs(title = "Distribution of Probe Findings Across Viruses",
x = "Virus Abbreviation",
y = "Number of Findings",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot4
heatmap_data <- data %>%
count(Abbreviation, Family, Probe)
plot5 <- ggplot(heatmap_data, aes(x = Abbreviation, y = Family, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
labs(title = "Heatmap of Probe Counts Across Virus Abbreviations and Families",
x = "Virus Abbreviation",
y = "Family",
fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot5
faceted_data <- data %>%
count(Abbreviation, Probe, Family)
plot6 <- ggplot(faceted_data, aes(x = Abbreviation, y = n, fill = Probe)) +
geom_bar(stat = "identity") +
facet_wrap(~ Family, scales = "free_x") +
theme_minimal() +
labs(title = "Count of Probes for Each Virus Abbreviation by Family",
x = "Virus Abbreviation",
y = "Count",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
faceted_data <- data %>%
count(Abbreviation, Probe, Family)
plot6 <- ggplot(faceted_data, aes(x = Abbreviation, y = n, fill = Probe)) +
geom_bar(stat = "identity") +
facet_wrap(~ Family, scales = "free_x") +
theme_minimal() +
labs(title = "Count of Probes for Each Virus Abbreviation by Family",
x = "Virus Abbreviation",
y = "Count",
fill = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot6
bubble_data <- data %>%
count(Abbreviation, Species, Probe)
# Create the bubble plot
plot7 <- ggplot(bubble_data, aes(x = Abbreviation, y = Species, size = n, color = Probe)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Bubble Plot of Probe Distribution Across Virus Abbreviations and Species",
x = "Virus Abbreviation",
y = "Species",
size = "Count",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot7
head(data)
data <- read.csv('../data/tables/output/tblastn_results.csv')
head(data)
# Summarize the data to get counts of Probes within each Virus Abbreviation
density_data <- data %>%
count(Virus.Abbreviation, Probe)
# Summarize the data to get counts of Probes within each Virus Abbreviation
density_data <- data %>%
count(Abbreviation, Probe)
# Create the density plot
ggplot(density_data, aes(x = n, fill = Probe)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(title = "Density Plot of Probe Counts",
x = "Number of Findings",
y = "Density",
fill = "Probe")
install.packages("ggridges")
library(readr)
library(dplyr)
library(ggplot2)
library(ggmosaic)
library(ggridges)
# Summarize the data to get counts of Probes within each Virus Abbreviation
ridge_data <- data %>%
count(Abbreviation, Probe)
# Create the ridgeline plot
ggplot(ridge_data, aes(x = n, y = Abbreviation, fill = Probe)) +
geom_density_ridges() +
theme_minimal() +
labs(title = "Ridgeline Plot of Probe Counts by Virus Abbreviation",
x = "Number of Findings",
y = "Virus Abbreviation",
fill = "Probe")
# Summarize the data to get counts of Probes within each Virus Abbreviation
lollipop_data <- data %>%
count(Abbreviation, Probe)
# Create the lollipop chart
ggplot(lollipop_data, aes(x = Abbreviation, y = n, color = Probe)) +
geom_segment(aes(x = Abbreviation, xend = Abbreviation, y = 0, yend = n), size = 1) +
geom_point(size = 4) +
theme_minimal() +
labs(title = "Lollipop Chart of Probe Counts by Virus Abbreviation",
x = "Virus Abbreviation",
y = "Number of Findings",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
density_data <- data %>%
count(Abbreviation, Probe)
plot8 <- ggplot(density_data, aes(x = n, fill = Probe)) +
geom_density(alpha = 0.7) +
theme_minimal() +
labs(title = "Density Plot of Probe Counts",
x = "Number of Findings",
y = "Density",
fill = "Probe")
plot8
lollipop_data <- data %>%
count(Abbreviation, Probe)
plot9 <- ggplot(lollipop_data, aes(x = Abbreviation, y = n, color = Probe)) +
geom_segment(aes(x = Abbreviation, xend = Abbreviation, y = 0, yend = n), size = 1) +
geom_point(size = 4) +
theme_minimal() +
labs(title = "Lollipop Chart of Probe Counts by Virus Abbreviation",
x = "Virus Abbreviation",
y = "Number of Findings",
color = "Probe") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot9
