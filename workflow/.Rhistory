probe_name <- as.character(probe)  # Ensure it's a character
if (!is.null(probe_name) && length(probe_name) > 0) {
if (!(probe_name %in% names(probe_counts))) {
probe_counts[[probe_name]] <- 1
} else {
probe_counts[[probe_name]] <- probe_counts[[probe_name]] + 1
}
return(paste0(probe_name, "_", probe_counts[[probe_name]]))
} else {
return(NA_character_)  # Handle cases where probe is missing
}
}))
# Assign names with incremental numbering for each probe
mcols(restored_gr)$name <- unlist(map(mcols(restored_gr)$probe, function(probe) {
probe_name <- as.character(probe)  # Ensure it's a character
if (!is.null(probe_name) && length(probe_name) > 0) {
if (!(probe_name %in% names(probe_counts))) {
probe_counts[[probe_name]] <- 1
} else {
probe_counts[[probe_name]] <- probe_counts[[probe_name]] + 1
}
return(paste0(probe_name, "_", probe_counts[[probe_name]]))
} else {
return(NA_character_)  # Handle cases where probe is missing
}
}))
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$e_value <- format(data$hsp_evalue, scientific = TRUE)
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
gr
reduced_gr <- reduce(gr, with.revmap = TRUE)
# Restore metadata after range reduction (if needed)
restore_metadata <- function(reduced_gr, original_gr) {
revmap <- mcols(reduced_gr)$revmap
mcols(reduced_gr)$probe <- map(revmap, ~ unique(mcols(original_gr)$probe[.]))
mcols(reduced_gr)$family <- map(revmap, ~ unique(mcols(original_gr)$family[.]))
mcols(reduced_gr)$virus <- map(revmap, ~ unique(mcols(original_gr)$virus[.]))
mcols(reduced_gr)$mean_bitscore <- map(revmap, ~ mean(mcols(original_gr)$bitscore[.]))
mcols(reduced_gr)$median_bitscore <- map(revmap, ~ median(mcols(original_gr)$bitscore[.]))
return(reduced_gr)
}
restored_gr <- restore_metadata(reduced_gr, gr)
restored_gr <- restored_gr %>% select(-revmap)
restored_gr
generate_probe_names <- function(gr) {
probe_counts <- list()
mcols(gr)$name <- unlist(map(mcols(gr)$probe, function(probe) {
probe_name <- as.character(probe)  # Ensure it's a character
if (!is.null(probe_name) && length(probe_name) > 0) {
if (!(probe_name %in% names(probe_counts))) {
probe_counts[[probe_name]] <- 1
} else {
probe_counts[[probe_name]] <- probe_counts[[probe_name]] + 1
}
return(paste0(probe_name, "_", probe_counts[[probe_name]]))
} else {
return(NA_character_)  # Handle missing probe values
}
}))
return(gr)
}
named_restored_gr <- generate_probe_names(restored_gr)
unique(restored_gr$probe)
# Reduction operation
# Reduce overlapping ranges for the single species
reduced_gr <- gr %>% group_by(probe) %>% reduce(gr, with.revmap = TRUE) %>% ungroup()
# Reduction operation
# Reduce overlapping ranges for the single species
reduced_gr <- gr %>% group_by(probe, drop.empty.ranges = FALSE) %>% reduce(gr, with.revmap = TRUE) %>% ungroup()
# Reduction operation
# Reduce overlapping ranges for the single species
reduced_gr <- gr %>% group_by(probe) %>% reduce(gr, with.revmap = TRUE, drop.empty.ranges = FALSE) %>% ungroup()
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr.groups <- function (gr) {
gr %>%
group_by(probe) %>%
reduce(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr.groups(gr)
reduced_gr
# Restore metadata after range reduction (if needed)
restore_metadata <- function(reduced_gr, original_gr) {
revmap <- mcols(reduced_gr)$revmap
mcols(reduced_gr)$probe <- map(revmap, ~ unique(mcols(original_gr)$probe[.]))
mcols(reduced_gr)$family <- map(revmap, ~ unique(mcols(original_gr)$family[.]))
mcols(reduced_gr)$virus <- map(revmap, ~ unique(mcols(original_gr)$virus[.]))
mcols(reduced_gr)$mean_bitscore <- map(revmap, ~ mean(mcols(original_gr)$bitscore[.]))
mcols(reduced_gr)$median_bitscore <- map(revmap, ~ median(mcols(original_gr)$bitscore[.]))
return(reduced_gr)
}
restored_gr <- restore_metadata(reduced_gr, gr)
restored_gr
unique(restored_gr$probe)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr.groups <- function (gr) {
gr %>%
group_by(probe) %>%
reduce(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr.groups(gr)
reduced_gr
# Check the result for GRanges object in the restored list
unique(restored_gr.list[[12]])
# Check the result for GRanges object in the restored list
unique(restored_gr.list[[12]]$probe)
restored_gr.list <- map(restored_gr.list, remove_revmap)
reducing.gr.groups <- function (gr) {
gr %>%
group_by(probe) %>%
reduce(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced.gr.list <- map(gr.list, reducing.gr.groups)
gr.df <- as.data.frame(gr)
granges.split <- function(x, y) {
GRanges(seqname = x$seqnames,
ranges = IRanges(start = x$start, end = x$end),
strand = x$strand,
family = x$family,
virus = x$virus,
probe = x$probe,
bitscore = x$bitscore,
species = y$species)
}
gr.df <- as.data.frame(gr)
gr.df$species <- gr.df$species
gr.list <- gr.df %>%
group_by(species) %>%
group_map(~granges.split(.x, .y))
get_name <- function(gr) {
species_name <- unique(gr$species)
names(gr) <- species_name
}
species_names <- map(gr.list, get_name)
names(gr.list) <- species_names
gr.list[[12]]
reducing.gr.groups <- function (gr) {
gr %>%
group_by(probe) %>%
reduce(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced.gr.list <- map(gr.list, reducing.gr.groups)
# Function to restore metadata using revmap, for a single GRanges pair (reduced and original)
restore_metadata <- function(reduced_gr, original_gr) {
# Extract the revmap from the reduced GRanges object
revmap <- mcols(reduced_gr)$revmap
# For each metadata column, restore the original values using revmap
mcols(reduced_gr)$probe <- map(revmap, function(indices) {
unique(mcols(original_gr)$probe[indices])  # Use unique to avoid duplicates
})
mcols(reduced_gr)$family <- map(revmap, function(indices) {
unique(mcols(original_gr)$family[indices])
})
mcols(reduced_gr)$species <- map(revmap, function(indices) {
unique(mcols(original_gr)$species[indices])
})
mcols(reduced_gr)$virus <- map(revmap, function(indices) {
unique(mcols(original_gr)$virus[indices])
})
mcols(reduced_gr)$bitscore <- map_dbl(revmap, function(indices) {
mean(mcols(original_gr)$bitscore[indices])
})
return(reduced_gr)
}
reduced_gr
# Assuming reduced.gr.list and original.gr.list are both GRangesList
# Use map2 to iterate over both lists simultaneously
restored_gr.list <- map2(reduced.gr.list, gr.list, restore_metadata)
remove_revmap <- function (gr) {
gr %>% select(-revmap)
}
restored_gr.list <- map(restored_gr.list, remove_revmap)
# Check the result for GRanges object in the restored list
unique(restored_gr.list[[12]]$probe)
# Check the result for GRanges object in the restored list
unique(restored_gr.list[[1]]$probe)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
as.list(mcols(reduced_gr)$revmap)
unique
as.list(mcols(reduced_gr)$revmap)
as.list(mcols(reduced_gr)$revmap)
mcols(reduced_gr)$revmap
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges(with.revmap=T) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe=probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(Probe=probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = unique(probe)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe)) %>%
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce(probe = probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges(probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges(gr$probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges(gr$probe, min.gapwidth = 1) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe, species = species, virus = virus) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species,
virus = unique(virus)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = unique(species),
virus = unique(virus)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = unique(species),
virus = unique(virus)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species[1],
virus = unique(virus)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species[1],
virus = unique(virus),
bitscore = mean(bitscore)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore),
e_value = mean(e_value)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore),
e_value = mean(as.float(e_value))) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore),
e_value = mean(as.double(e_value))) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore),
e_value = mean(double(e_value))) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
as.list(mcols(reduced_gr)$revmap)
unique
# Restore metadata after range reduction (if needed)
restore_metadata <- function(reduced_gr, original_gr) {
revmap <- mcols(reduced_gr)$revmap
mcols(reduced_gr)$probe <- map(revmap, ~ unique(mcols(original_gr)$probe[.]))
mcols(reduced_gr)$family <- map(revmap, ~ unique(mcols(original_gr)$family[.]))
mcols(reduced_gr)$virus <- map(revmap, ~ unique(mcols(original_gr)$virus[.]))
mcols(reduced_gr)$mean_bitscore <- map(revmap, ~ mean(mcols(original_gr)$bitscore[.]))
mcols(reduced_gr)$median_bitscore <- map(revmap, ~ median(mcols(original_gr)$bitscore[.]))
return(reduced_gr)
}
restored_gr <- restore_metadata(reduced_gr, gr)
restored_gr <- restored_gr %>% select(-revmap)
unique(restored_gr$probe)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore)) %>%
arrange(.by_group = start)
}
onisdf
exit
finish
gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
probe = probe,
species = species[1],
virus = unique(virus),
family = unique(family),
bitscore = mean(bitscore)) %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
as.list(mcols(reduced_gr)$revmap)
unique
# Restore metadata after range reduction (if needed)
restore_metadata <- function(reduced_gr, original_gr) {
revmap <- mcols(reduced_gr)$revmap
mcols(reduced_gr)$probe <- map(revmap, ~ unique(mcols(original_gr)$probe[.]))
mcols(reduced_gr)$family <- map(revmap, ~ unique(mcols(original_gr)$family[.]))
mcols(reduced_gr)$virus <- map(revmap, ~ unique(mcols(original_gr)$virus[.]))
mcols(reduced_gr)$mean_bitscore <- map(revmap, ~ mean(mcols(original_gr)$bitscore[.]))
mcols(reduced_gr)$median_bitscore <- map(revmap, ~ median(mcols(original_gr)$bitscore[.]))
return(reduced_gr)
}
restored_gr <- restore_metadata(reduced_gr, gr)
restored_gr <- restored_gr %>% select(-revmap)
unique(restored_gr$probe)
# Naming hits
generate_probe_names <- function(gr) {
probe_counts <- list()
mcols(gr)$name <- unlist(map(mcols(gr)$probe, function(probe) {
probe_name <- as.character(probe)  # Ensure it's a character
if (!is.null(probe_name) && length(probe_name) > 0) {
if (!(probe_name %in% names(probe_counts))) {
probe_counts[[probe_name]] <- 1
} else {
probe_counts[[probe_name]] <- probe_counts[[probe_name]] + 1
}
return(paste0(probe_name, "_", probe_counts[[probe_name]]))
} else {
return(NA_character_)  # Handle missing probe values
}
}))
return(gr)
}
named_restored_gr <- generate_probe_names(restored_gr)
quit(save="ask")
