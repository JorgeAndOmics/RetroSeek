mean_bitscore = paste(unique(mean_bitscore), collapse = "; "),
mean_identity = paste(unique(mean_identity), collapse = "; ")
) %>%
select(-probe.ltr_valid) %>%
arrange(.by_group = start)
}
domain_valid_hits <- gr %>%
# 1) Overlap join with ltr_valid_hits on same strand
join_overlap_inner_directed(
ltr_valid_hits,
suffix = c(".gr", ".ltr_valid")) %>%
# 2) Only keep rows whose probe matches after the merge
filter(probe.gr == probe.ltr_valid) %>%
mutate(probe = probe.gr) %>%
# 3) Overlap join the result with ltr_domain on same strand
join_overlap_inner_directed(
ltr_domain,
suffix = c(".merged", ".ltr_domain")) %>%
# 4) Again, keep only rows with matching probe
filter(probe.merged == probe.ltr_domain) %>%
mutate(Parent = as.character(Parent)) %>%
group_by(probe.ltr_valid) %>%
# 5) Finally, reduce
reduce_ranges_directed(
probe         = paste(unique(probe.ltr_valid), collapse = "; "),
species       = paste(unique(species.gr), collapse = "; "),
virus         = paste(sort(unique(virus.gr)), collapse = "; "),
family        = paste(sort(unique(family.gr)), collapse = "; "),
origin        = "proviral_sequence",
type          = "protein_match",
name          = paste(sort(unique(name)), collapse = "; "),
ID            = paste(sort(unique(ID)), collapse = "; "),
Parent        = paste(unique(Parent), collapse = "; "),
mean_bitscore = paste(unique(mean_bitscore), collapse = "; "),
mean_identity = paste(unique(mean_identity), collapse = "; ")
) %>%
select(-probe.ltr_valid) %>%
arrange(.by_group = start)
domain_valid_hits
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$identity <- (data$hsp_identity / data$hsp_align_length) * 100
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
# Filter ranges by bitscore
bitscore_threshold <- as.numeric(args.bitscore_threshold)
identity_threshold <- as.numeric(args.identity_threshold)
gr <- gr %>%
filter(bitscore > bitscore_threshold,
identity > identity_threshold)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
gr
args.defaults <- "C:/Users/Lympha/Documents/Repositories/enERVate/workflow/defaults.py"
library(reticulate)
py_run_file(args.defaults)
py_run_file(args.defaults)
defaults <- reticulate::import(args.defaults)
defaults <- reticulate::import(defaults)
defaults <- reticulate::import(defaults)
args.defaults <- "C:/Users/Lympha/Documents/Repositories/enERVate/workflow"
defaults <- reticulate::import_from_path(args.defaults, "defaults")
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults <- reticulate::import_from_path("defaults", args.defaults)
# Set working directory where the script is located
setwd(dirname(args[0])
# Set working directory where the script is located
setwd(dirname(args[0]))
# Set working directory where the script is located
setwd(dirname(args[0]))
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults <- reticulate::import_from_path("defaults", args.defaults)
args.defaults <- "C:/Users/Lympha/Documents/Repositories/enERVate/workflow"
defaults <- reticulate::import_from_path("defaults", args.defaults)
getwd()
setwd("C:/Users/Lympha/Documents/Repositories/enERVate/workflow")
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
gr <- gr %>%
mutate(min_gapwidth = map(as.character(probe), ~ get_or_default(defaults, .x, 0)))
# Helper function. Emulates Python's dictionaries get method
get_or_default <- function(x, key, default) {
if (!is.null(x[[key]])) x[[key]] else default
}
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
# Helper function. Emulates Python's dictionaries get method
get_or_default <- function(x, key, default) {
if (!is.null(x[[key]])) x[[key]] else default
}
gr <- gr %>%
mutate(min_gapwidth = map(as.character(probe), ~ get_or_default(defaults, .x, 0)))
gr <- gr %>%
mutate(min_gapwidth = map(as.character(probe), ~ get_or_default(defaults, .x, defaults$PROBE_MIN_LENGTH))) %>%
# Reduce overlapping ranges for the single species. Collapsing #2
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = as.character(paste(sort(unique(virus)), collapse = "; ")),
family = as.character(paste(sort(unique(family)), collapse = "; ")),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start)
}
gr <- gr %>%
mutate(min_gapwidth = map(as.character(probe), ~ get_or_default(.x, as.character(probe), 0)))
gr <- gr %>%
mutate(min_gapwidth = map(as.character(probe), ~ get_or_default(.x, as.character(probe), 0)))
gr <- gr %>%
mutate(min_gapwidth = map(as.character(probe), ~ get_or_default(defaults$PROBE_MIN_LENGTH, .x, 0)))
gr
gr$probe
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(defaults$PROBE_MIN_LENGTH[probe]), defaults$PROBE_MIN_LENGTH[probe], 0)
)
gr
## ENERVATE DATA
# Generate GRanges Object
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$identity <- (data$hsp_identity / data$hsp_align_length) * 100
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
# Filter ranges by bitscore
bitscore_threshold <- as.numeric(args.bitscore_threshold)
identity_threshold <- as.numeric(args.identity_threshold)
gr <- gr %>%
filter(bitscore > bitscore_threshold,
identity > identity_threshold)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
gr
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
# Helper function. Emulates Python's dictionaries get method
get_or_default <- function(x, key, default) {
if (!is.null(x[[key]])) x[[key]] else default
}
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(defaults$PROBE_MIN_LENGTH[probe]), defaults$PROBE_MIN_LENGTH[probe], 0)
)
gr
defaults$PROBE_MIN_LENGTH
defaults$PROBE_MIN_LENGTH["ENV"]
defaults$PROBE_MIN_LENGTH[["ENV"]]
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$identity <- (data$hsp_identity / data$hsp_align_length) * 100
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
# Filter ranges by bitscore
bitscore_threshold <- as.numeric(args.bitscore_threshold)
identity_threshold <- as.numeric(args.identity_threshold)
gr <- gr %>%
filter(bitscore > bitscore_threshold,
identity > identity_threshold)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
# Merging ranges grouped by virus, preserving the rest of the metadata, based on defaults.py length. Collapsing #1
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
# Helper function. Emulates Python's dictionaries get method
get_or_default <- function(x, key, default) {
if (!is.null(x[[key]])) x[[key]] else default
}
gr
defaults$PROBE_MIN_LENGTH
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(defaults$PROBE_MIN_LENGTH[[probe]]), defaults$PROBE_MIN_LENGTH[[probe]], 0)
)
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(defaults$PROBE_MIN_LENGTH[probe]), defaults$PROBE_MIN_LENGTH[probe], 0)
)
gr
gr[1]
gr[1]
defaults$PROBE_MIN_LENGTH
defaults$PROBE_MIN_LENGTH["ENV"]
as.numeric(defaults$PROBE_MIN_LENGTH["ENV"])
as.integer(defaults$PROBE_MIN_LENGTH["ENV"])
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$identity <- (data$hsp_identity / data$hsp_align_length) * 100
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
# Filter ranges by bitscore
bitscore_threshold <- as.numeric(args.bitscore_threshold)
identity_threshold <- as.numeric(args.identity_threshold)
gr <- gr %>%
filter(bitscore > bitscore_threshold,
identity > identity_threshold)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
# Merging ranges grouped by virus, preserving the rest of the metadata, based on defaults.py length. Collapsing #1
gr
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
# Helper function. Emulates Python's dictionaries get method
get_or_default <- function(x, key, default) {
if (!is.null(x[[key]])) x[[key]] else default
}
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(as.integer(defaults$PROBE_MIN_LENGTH[probe])), as.integer(defaults$PROBE_MIN_LENGTH[probe]), 0)
)
gr
# 1) Split
gr_list <- split(gr, ~ virus + probe)
gr_list
gr
# 1) Split
gr_list <- split(gr, ~ probe)
gr_list
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- lapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(mcols(sub_gr)$min_gapwidth)
reduce_ranges_directed(sub_gr, min.gapwidth = gap_val)
})
gr_list_reduced
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- lapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(mcols(sub_gr)$min_gapwidth)
reduce_ranges_directed(sub_gr, min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = bitscore,
identity = identity,)
})
gr_list_reduced
gr
# 1) Split
gr_list <- split(gr, ~ probe + virus)
gr_list
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- lapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(mcols(sub_gr)$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- lapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(mcols(sub_gr)$min_gapwidth)
print(gap_val)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
gr
# 1) Split
gr_list <- split(gr, ~ probe)
gr_list
unique(gr$min_gapwidth)
unique(gr_list[1]$min_gapwidth)
unique(gr_list["ENV"]$min_gapwidth)
unique(gr_list["POL"]$min_gapwidth)
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
print(gap_val)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
gr_list_reduced
# 3) Combine
gr <- bind_ranges(gr_list_reduced)
gr
## ENERVATE DATA
# Generate GRanges Object
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$identity <- (data$hsp_identity / data$hsp_align_length) * 100
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
# Filter ranges by bitscore
bitscore_threshold <- as.numeric(args.bitscore_threshold)
identity_threshold <- as.numeric(args.identity_threshold)
gr <- gr %>%
filter(bitscore > bitscore_threshold,
identity > identity_threshold)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
gr
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
# Helper function. Emulates Python's dictionaries get method
get_or_default <- function(x, key, default) {
if (!is.null(x[[key]])) x[[key]] else default
}
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(as.integer(defaults$PROBE_MIN_LENGTH[probe])), as.integer(defaults$PROBE_MIN_LENGTH[probe]), 0)
)
# 1) Split
gr_list <- split(gr, ~ probe)
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
# 3) Combine
gr <- bind_ranges(gr_list_reduced)
gr
gr$virus
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = as.character(probe),
virus = as.character(virus),
species = as.character(species),
family = as.character(family),
bitscore = as.numeric(max(bitscore)),
identity = as.numeric(max(identity)))
})
Generate GRanges Object
# Generate GRanges Object
gr <- GRanges(seqnames = data$accession,
ranges = IRanges(
start = data$hsp_sbjct_start,
end = data$hsp_sbjct_end),
strand = data$strand)
mcols(gr)$family <- data$family
mcols(gr)$virus <- data$virus
mcols(gr)$bitscore <- data$hsp_bits
mcols(gr)$identity <- (data$hsp_identity / data$hsp_align_length) * 100
mcols(gr)$species <- data$species
mcols(gr)$probe <- data$probe
# Filter ranges by bitscore
bitscore_threshold <- as.numeric(args.bitscore_threshold)
identity_threshold <- as.numeric(args.identity_threshold)
gr <- gr %>%
filter(bitscore > bitscore_threshold,
identity > identity_threshold)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
# Merging ranges grouped by virus, preserving the rest of the metadata, based on defaults.py length. Collapsing #1
defaults <- reticulate::import_from_path("defaults", args.defaults)
defaults$PROBE_MIN_LENGTH
gr <- gr %>%
mutate(
min_gapwidth = ifelse(!is.na(as.integer(defaults$PROBE_MIN_LENGTH[probe])), as.integer(defaults$PROBE_MIN_LENGTH[probe]), 0)
)
# 1) Split
gr_list <- split(gr, ~ probe)
gr_list
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = as.character(probe),
virus = as.character(virus),
species = as.character(species),
family = as.character(family),
bitscore = as.numeric(max(bitscore)),
identity = as.numeric(max(identity)))
})
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
}) %>%
mutate(
probe = as.numeric(probe)
)
sub_gr
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
gr_list_reduced
# 2) Apply reduce_ranges_directed per subgroup
gr_list_reduced <- sapply(gr_list, function(sub_gr) {
# Each subgroup shares the same min_gapwidth
gap_val <- unique(sub_gr$min_gapwidth)
sub_gr <- sub_gr %>%
group_by(probe, virus) %>%
reduce_ranges_directed(min.gapwidth = gap_val,
probe = probe,
virus = virus,
species = species,
family = family,
bitscore = max(bitscore),
identity = max(identity))
})
# 3) Combine
gr <- bind_ranges(gr_list_reduced)
# Reduce overlapping ranges for the single species. Collapsing #2
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = as.character(paste(sort(unique(virus)), collapse = "; ")),
family = as.character(paste(sort(unique(family)), collapse = "; ")),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start)
}
