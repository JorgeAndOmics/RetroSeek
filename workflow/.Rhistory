overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
probe_overlap_ltr <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
probe_overlap_ltr
ltrharvest_overlap_calculator <- function(gr, ltr_data){
overlap_df_ltr <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste(pr,'_LTR')
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
probe_overlap_ltr <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
probe_overlap_ltr
ltrharvest_overlap_calculator <- function(gr, ltr_data){
overlap_df_ltr <- data.frame(matrix(NA, ncol = 4))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste(pr,'_LTR')
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
probe_overlap_ltr <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
probe_overlap_ltr
ltrharvest_overlap_calculator <- function(gr, ltr_data){
overlap_df_ltr <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_ltr) <- c(unique(gr$probe))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste0(pr, '_LTR')
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
probe_overlap_ltr <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
probe_overlap_ltr
ltrharvest_overlap_calculator <- function(gr, ltr_data){
overlap_df_ltr <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_ltr) <- c(paste0(unique(gr$probe), '_LTR'))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste0('LTR_', pr)
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
probe_overlap_ltr <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
probe_overlap_ltr
ltrharvest_overlap_calculator <- function(gr, ltr_data){
overlap_df_ltr <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_ltr) <- c(paste0('LTR_', unique(gr$probe)))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste0('LTR_', pr)
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
probe_overlap_ltr <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
probe_overlap_ltr
ltr_overlap_df <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
# Calculate numbers and percentages of overlap for full LTRharvest
ltr_full_overlap_df <- data.frame(matrix(NA, nrow = 1, ncol = 4))
rownames(ltr_overlap_df) <- c('LTRharvest')
colnames(ltr_overlap_df) <- c('In', 'Out', 'In%', 'Out%')
ltr_overlap_df[1, 1] <- length(LonE)
ltr_overlap_df[1, 2] <- length(LoutsideE)
ltr_overlap_df[1, 3] <- percent_LonE
ltr_overlap_df[1, 4] <- percent_LoutsideE
# Combine all overlap dataframes
overlap_df <- rbind(enervate_overlap_df, ltr.full_overlap_df, probe_overlap_df, ltr_overlap_df)
# Calculate numbers and percentages of overlap for full enERVate
enervate_overlap_df <- data.frame(matrix(NA, nrow = 1, ncol = 4))
rownames(enervate_overlap_df) <- c('enERVate')
colnames(enervate_overlap_df) <- c('In', 'Out', 'In%', 'Out%')
enervate_overlap_df[1, 1] <- length(EonL)
enervate_overlap_df[1, 2] <- length(EoutsideL)
enervate_overlap_df[1, 3] <- percent_EonL
enervate_overlap_df[1, 4] <- percent_EoutsideL
ltr_overlap_df <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
ltr_overlap_df
# Combine all overlap dataframes
overlap_df <- rbind(enervate_overlap_df, ltr.full_overlap_df, probe_overlap_df, ltr_overlap_df)
enervate_overlap_df <- data.frame(matrix(NA, nrow = 1, ncol = 4))
rownames(enervate_overlap_df) <- c('enERVate')
colnames(enervate_overlap_df) <- c('In', 'Out', 'In%', 'Out%')
enervate_overlap_df[1, 1] <- length(EonL)
enervate_overlap_df[1, 2] <- length(EoutsideL)
enervate_overlap_df[1, 3] <- percent_EonL
enervate_overlap_df[1, 4] <- percent_EoutsideL
# Calculate numbers and percentages of overlap for full LTRharvest
ltr.full_overlap_df <- data.frame(matrix(NA, nrow = 1, ncol = 4))
rownames(ltr.full_overlap_df) <- c('LTRharvest')
colnames(ltr.full_overlap_df) <- c('In', 'Out', 'In%', 'Out%')
ltr.full_overlap_df[1, 1] <- length(LonE)
ltr.full_overlap_df[1, 2] <- length(LoutsideE)
ltr.full_overlap_df[1, 3] <- percent_LonE
ltr.full_overlap_df[1, 4] <- percent_LoutsideE
# Calculate numbers and percentages of overlap for probes over LTRharvest
probe_overlap_calculator <- function(gr, ltr_data){
overlap_df_probes <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_probes) <- c(unique(gr$probe))
colnames(overlap_df_probes) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_probes[pr, 1] <- length(EonL)
overlap_df_probes[pr, 2] <- length(EoutsideL)
overlap_df_probes[pr, 3] <- percent_EonL
overlap_df_probes[pr, 4] <- percent_EoutsideL
}
return(overlap_df_probes)
}
probe_overlap_df <- probe_overlap_calculator(named_reduced_gr, ltr_data)
# Calculate numbers and percentages of overlap for LTRharvest over probes
ltrharvest_overlap_calculator <- function(gr, ltr_data){
overlap_df_ltr <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_ltr) <- c(paste0('LTR_', unique(gr$probe)))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste0('LTR_', pr)
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_data)
ov.L2E <- findOverlaps(ltr_data, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_data) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_data) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
ltr_overlap_df <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_data)
# Combine all overlap dataframes
overlap_df <- rbind(enervate_overlap_df, ltr.full_overlap_df, probe_overlap_df, ltr_overlap_df)
overlap_df
library(arrow)
test <- arrow::read_parquet('../results/tables/segmented_species/Myotis_myotis_accessory.parquet')
test2 <- arrow::read_parquet('../results/tables/segmented_species/Myotis_myotis_main.parquet')
####
# Dependencies
options(warn = -1)  # Suppress warnings
suppressMessages({  # Suppress messages
library(arrow)
library(tidyverse)
library(docopt)
library(GenomicRanges)
library(Biostrings)
library(plyranges)
library(rtracklayer)
})
# Define the command-line interface (CLI) description
doc <- "
Usage:
script.R --enERVate=<file> --LTRharvest=<file> --original_ranges=<file> --candidate_ranges=<file> --validated_ranges=<file> --overlap_matrix=<file>
Options:
--enERVate=<file>              Path to the enERVate Parquet input file
--LTRharvest=<file>            Path to the LTRharvest GFF input file
--original_ranges=<file>       Path to the Original Ranges output file
--candidate_ranges=<file>      Path to the Candidate Ranges output file
--validated_ranges=<file>      Path to the Validated Ranges output file
--overlap_matrix=<file>        Path to the Overlap Matrix output file
"
# Parse command-line arguments
args <- docopt(doc)
ov.E2L
test <- subsetbyhits(named_reduced_gr, ov.E2L)
test <- subsetByOverlaps(named_reduced_gr, ov.E2L)
test <- subsetByOverlaps(named_reduced_gr, ltr_data)
test
EonL
test
# Find overlaps between enERVate and LTRharvest
ov.E2L <- findOverlaps(named_reduced_gr, ltr_data)
ov.L2E <- findOverlaps(ltr_data, named_reduced_gr)
EonL <- named_reduced_gr[unique(queryHits(ov.E2L))]
LonE <- ltr_data[unique(queryHits(ov.L2E))]
EoutsideL <- named_reduced_gr[-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_data[-unique(queryHits(ov.L2E))]
EonL
test
reduced_gr <- reducing.gr(gr)
# Improving readibility of the reduced ranges
reduced_gr$virus <- sort(as.list(reduced_gr$virus))
# Improving readibility of the reduced ranges
reduced_gr$virus <- as.list(reduced_gr$virus) %>% arrange()
reduced_gr$virus <- lapply(reduced_gr$virus, ~as.list(.))
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(.x))
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(.x))
reduced_gr$family <- map(reduced_gr$family, ~as.list(.x))
reduced_gr
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(order(.x)))
reduced_gr$family <- map(reduced_gr$family, ~as.list(order(.x)))
reduced_gr
reduced_gr <- reducing.gr(gr)
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(sort(.x)))
reduced_gr$family <- map(reduced_gr$family, ~as.list(sort(.x)))
reduced_gr
reduced_gr$virus <- map(reduced_gr$virus, ~order(unlist(.x))))
reduced_gr$virus <- map(reduced_gr$virus, ~order(unlist(.x)))
reduced_gr
reduced_gr <- reducing.gr(gr)
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(.x))
reduced_gr$family <- map(reduced_gr$family, ~as.list(.x))
reduced_gr$virus <- map(reduced_gr$virus, ~sort(unlist(.x)))
reduced_gr
reduced_gr$virus <- map(reduced_gr$virus, sort)
reduced_gr
reduced_gr$virus
reduced_gr
reduced_gr$family <- map(reduced_gr$family, sort)
reduced_gr$family <- lapply(reduced_gr$family, sort)
reduced_gr$family <- map(reduced_gr$family, sort)
reduced_gr <- reducing.gr(gr)
# Improving readibility of the reduced ranges
reduced_gr$virus <- map(reduced_gr$virus, sort)
reduced_gr$family <- map(reduced_gr$family, sort)
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(.x))
reduced_gr$family <- map(reduced_gr$family, ~as.list(.x))
reduced_gr
reduced_gr$family[1:3]
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = paste(sort(unique(virus)), collapse = "; "),
family = paste(sort(unique(family)), collapse = "; "),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(.x))
reduced_gr$family <- map(reduced_gr$family, ~as.list(.x))
reduced_gr
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = paste(sort(unique(virus)), collapse = "; "),
family = paste(sort(unique(family)), collapse = "; "),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start) %>%
reduced_gr$virus <- map(virus, sort)
reduced_gr$family <- map(family, sort)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = paste(sort(unique(virus)), collapse = "; "),
family = paste(sort(unique(family)), collapse = "; "),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start) %>%
map(virus, sort) %>%
map(family, sort)
}
reduced_gr <- reducing.gr(gr)
# Reduce overlapping ranges for the single species. Collapsing #1
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = paste(sort(unique(virus)), collapse = "; "),
family = paste(sort(unique(family)), collapse = "; "),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start) %>%
map(virus, ~as.list(.x)) %>%
map(family, ~as.list(.x))
}
reduced_gr <- reducing.gr(gr)
reducing.gr <- function (gr) {
gr %>%
group_by(probe) %>%
reduce_ranges_directed(
species = paste(unique(species), collapse = "; "),
virus = paste(sort(unique(virus)), collapse = "; "),
family = paste(sort(unique(family)), collapse = "; "),
mean_bitscore = mean(bitscore),
mean_identity = mean(identity),
type = "proviral_sequence") %>%
arrange(.by_group = start)
}
reduced_gr <- reducing.gr(gr)
# Improving readibility of the reduced ranges
reduced_gr$virus <- map(reduced_gr$virus, ~as.list(.x))
reduced_gr$family <- map(reduced_gr$family, ~as.list(.x))
reduced_gr$family[1:3]
seq_along(reduced_gr$probe)
seqinfo(gr)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1], isCircular = FALSE)
seqinfo(gr) <- Seqinfo(seqnames = seqlevels(gr), genome = gr$species[1])
seqlengths(gr) <- chrom_lengths[names(seqlengths(gr))]
seqlengths(gr)
seqinfo(gr)
seqlevels(gr)
ltr_retransp <- ltr_data %>%
filter(type == "LTR_retrotransposon")
# Find overlaps between enERVate and LTRharvest
ov.E2L <- findOverlaps(named_reduced_gr, ltr_retransp)
ov.L2E <- findOverlaps(ltr_retransp, named_reduced_gr)
EonL <- named_reduced_gr[unique(queryHits(ov.E2L))]
LonE <- ltr_retransp[unique(queryHits(ov.L2E))]
EoutsideL <- named_reduced_gr[-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_retransp[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(named_reduced_gr) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_retransp) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(named_reduced_gr) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_retransp) * 100, 2)
#####################
#####################
# Calculate numbers and percentages of overlap for full enERVate
enervate_overlap_df <- data.frame(matrix(NA, nrow = 1, ncol = 4))
rownames(enervate_overlap_df) <- c('enERVate')
colnames(enervate_overlap_df) <- c('In', 'Out', 'In%', 'Out%')
enervate_overlap_df[1, 1] <- length(EonL)
enervate_overlap_df[1, 2] <- length(EoutsideL)
enervate_overlap_df[1, 3] <- percent_EonL
enervate_overlap_df[1, 4] <- percent_EoutsideL
# Calculate numbers and percentages of overlap for full LTRharvest
ltr.full_overlap_df <- data.frame(matrix(NA, nrow = 1, ncol = 4))
rownames(ltr.full_overlap_df) <- c('LTRharvest')
colnames(ltr.full_overlap_df) <- c('In', 'Out', 'In%', 'Out%')
ltr.full_overlap_df[1, 1] <- length(LonE)
ltr.full_overlap_df[1, 2] <- length(LoutsideE)
ltr.full_overlap_df[1, 3] <- percent_LonE
ltr.full_overlap_df[1, 4] <- percent_LoutsideE
# Calculate numbers and percentages of overlap for probes over LTRharvest
probe_overlap_calculator <- function(gr, ltr_retransp){
overlap_df_probes <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_probes) <- c(unique(gr$probe))
colnames(overlap_df_probes) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_retransp)
ov.L2E <- findOverlaps(ltr_retransp, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_retransp[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_retransp[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_retransp) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_retransp) * 100, 2)
overlap_df_probes[pr, 1] <- length(EonL)
overlap_df_probes[pr, 2] <- length(EoutsideL)
overlap_df_probes[pr, 3] <- percent_EonL
overlap_df_probes[pr, 4] <- percent_EoutsideL
}
return(overlap_df_probes)
}
probe_overlap_df <- probe_overlap_calculator(named_reduced_gr, ltr_retransp)
# Calculate numbers and percentages of overlap for LTRharvest over probes
ltrharvest_overlap_calculator <- function(gr, ltr_retransp){
overlap_df_ltr <- data.frame(matrix(NA, nrow = length(unique(gr$probe)), ncol = 4))
rownames(overlap_df_ltr) <- c(paste0('LTR_', unique(gr$probe)))
colnames(overlap_df_ltr) <- c('In', 'Out', 'In%', 'Out%')
for(pr in unique(gr$probe)){
overlap <- paste0('LTR_', pr)
ov.E2L <- findOverlaps(gr[gr$probe == pr], ltr_retransp)
ov.L2E <- findOverlaps(ltr_retransp, gr[gr$probe == pr])
EonL <- gr[gr$probe == pr][unique(queryHits(ov.E2L))]
LonE <- ltr_retransp[unique(queryHits(ov.L2E))]
EoutsideL <- gr[gr$probe == pr][-unique(queryHits(ov.E2L))]
LoutsideE <- ltr_retransp[-unique(queryHits(ov.L2E))]
percent_EonL <- round(length(EonL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LonE <- round(length(LonE) / length(ltr_retransp) * 100, 2)
percent_EoutsideL <- round(length(EoutsideL) / length(gr[gr$probe == pr]) * 100, 2)
percent_LoutsideE <- round(length(LoutsideE) / length(ltr_retransp) * 100, 2)
overlap_df_ltr[overlap, 1] <- length(LonE)
overlap_df_ltr[overlap, 2] <- length(LoutsideE)
overlap_df_ltr[overlap, 3] <- percent_LonE
overlap_df_ltr[overlap, 4] <- percent_LoutsideE
}
return(overlap_df_ltr)
}
ltr_overlap_df <- ltrharvest_overlap_calculator(named_reduced_gr, ltr_retransp)
# Combine all overlap dataframes
overlap_df <- rbind(enervate_overlap_df, ltr.full_overlap_df, probe_overlap_df, ltr_overlap_df)
######################
######################
# Validate hits via LTRharvest
valid_hits <- named_reduced_gr[queryHits(ov.E2L)]
mcols(valid_hits)$located_in <- ltr_retransp[subjectHits(ov.E2L)]$ID
test <- subsetByOverlaps(named_reduced_gr, ltr_retransp)
# Expand LTR Retrotrasposon ranges by an amount to rescue potential hits
flank_resize <- 2000
ltr_retransp_test <- ltr_retransp %>%
resize(width = flank_resize, fix = "start")
ltr_retransp
ltr_retransp_test
ltr_retransp_test <- ltr_retransp %>%
resize(width = width(ltr_retransp) + flank_resize, fix = "start")
ltr_retransp_test
ltr_retransp
ltr_retransp[200]
ltr_retransp_test[200]
ltr_retransp_test <- ltr_retransp %>%
resize(width = width(ltr_retransp) + flank_resize, fix = "center")
ltr_retransp_test[200]
ltr_retransp[200]
# Expand LTR Retrotrasposon ranges by an amount to rescue potential hits
flank_resize <- 4000
# Filter only LTR_retrotransposon full regions
ltr_retransp <- ltr_data %>%
filter(type == "LTR_retrotransposon")
# Expand LTR Retrotrasposon ranges by an amount to rescue potential hits
flank_resize <- 4000
ltr_retransp_test <- ltr_retransp %>%
resize(width = width(ltr_retransp) + flank_resize, fix = "center")
ltr_retransp[200]
ltr_retransp_test[200]
