import os
import math
import defaults

BLAST_DB_EXT = ['ndb', 'nhr', 'nin', 'not', 'nsq', 'ntf', 'nto']
LTR_INDEX_EXT = ['des', 'esq', 'lcp', 'llv', 'md5', 'prj', 'sds', 'ssp', 'suf']
BLAST_OUTPUT_EXT = ['csv', 'parquet']

rule directory_generator:
    output:
        root_dir=defaults.ROOT,
        root_db_dir=defaults.ROOT_DB,
        species_dir=defaults.SPECIES_DIR,
        species_db=defaults.SPECIES_DB,
        ltrharvest_dir=defaults.LTRHARVEST_DIR,
        ltrdigest_dir=defaults.LTRDIGEST_DIR,
        plot_dir=defaults.PLOT_DIR,
        log_dir=defaults.LOG_DIR,
        tmp_dir=defaults.TMP_DIR,
        results_dir=defaults.RESULTS_DIR,
        track_dir=defaults.TRACK_DIR,
        segmented_species_dir=defaults.SEGMENTED_SPECIES_DIR,
        track_original_dir=defaults.TRACK_ORIGINAL_DIR,
        track_candidates_dir=defaults.TRACK_CANDIDATES_DIR,
        track_validated_dir=defaults.TRACK_VALIDATED_DIR,
        table_input_dir=defaults.TABLE_INPUT_DIR,
        table_output_dir=defaults.TABLE_OUTPUT_DIR,
        table_overlap_matrix_dir=defaults.TABLE_OVERLAP_MATRIX_DIR,
        pickle_dir=defaults.PICKLE_DIR,
        hmm_profile_dir=defaults.HMM_PROFILE_DIR
    priority: 100
    shell:
        'mkdir -p {output:q}'


rule genome_downloader_setup:
    output:
        species=os.path.join(defaults.SPECIES_DB, '{genome}.fa')
    params:
        SPECIES_DB=defaults.SPECIES_DB,
        DOWNLOAD_LOG=os.path.join(defaults.SPECIES_DIR, 'download.txt'),
        API_KEY=defaults.NCBI_API_TOKEN
    threads:
        workflow.cores / 3
    shell:
        '''
        export NCBI_API_KEY={params.API_KEY:q} && \
        bash genome_downloader.sh {wildcards.genome:q} {params.SPECIES_DB:q} {params.DOWNLOAD_LOG:q}
        '''


rule genome_downloader:
    input:
        species=expand(os.path.join(defaults.SPECIES_DB, '{genome}.fa'), genome=defaults.SPECIES)
    priority: 100
    shell:
        """
        echo "Genome download completed for selected species"
        """


rule pfam_hmm_downloader:
    output:
        md5=os.path.join(defaults.ACCESSORY_DB, 'md5sum.txt'),
        hmm=os.path.join(defaults.ACCESSORY_DB, 'Pfam-A.hmm'),
    params:
        accessory_dir=defaults.ACCESSORY_DB,
        url='https://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.gz',
        md5_url='https://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/md5_checksums'
    shell:
        """
        wget -O {output.hmm:q}.gz {params.url:q} && \
        wget -O {output.md5:q} {params.md5_url:q} && \
        grep "Pfam-A.hmm.gz" {output.md5:q} | md5sum -c - && \
        gunzip -d -f {params.accessory_dir:q}/Pfam-A.hmm.gz > {output.hmm:q}
        """


rule blast_db_generator_setup:
    input:
        fa = os.path.join(defaults.SPECIES_DB, '{genome}.fa')
    output:
        ndb_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.ndb'),
        nhr_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.nhr'),
        nin_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.nin'),
        not_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.not'),
        nsq_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.nsq'),
        ntf_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.ntf'),
        nto_file=os.path.join(defaults.SPECIES_DB,'{genome}','{genome}.nto'),
    params:
        db_dir=defaults.SPECIES_DB
    shell:
        """
        for ext in FASTA fasta fna fas; do
            for file in *."$ext"; do
                if [ -f "$file" ]; then
                    mv "$file" "${{file%.*}}.fa"
                fi
            done
        done && \
        makeblastdb -in {input.fa:q} -dbtype nucl -parse_seqids \
        -out {params.db_dir:q}/{wildcards.genome:q}/{wildcards.genome:q}
        """


rule blast_db_generator:
    input:
        blast_db = expand(os.path.join(defaults.SPECIES_DB, '{genome}/{genome}.{ext}'),
                          genome=defaults.SPECIES,
                          ext=BLAST_DB_EXT)


rule ltr_index_generator_setup:
    input:
        fa=os.path.join(defaults.SPECIES_DB, '{genome}.fa')
    output:
        des_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.des'),
        esq_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.esq'),
        lcp_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.lcp'),
        llv_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.llv'),
        md5_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.md5'),
        prj_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.prj'),
        sds_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.sds'),
        ssp_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.ssp'),
        suf_file=os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.suf')
    params:
        db_dir=defaults.SPECIES_DB,
        suffix_params='-tis -suf -des -ssp -sds -dna -lcp',
    shell:
        """
        TMPDIR=$(mktemp -d "/tmp/suffixerator_{wildcards.genome}_XXXXXX)" && \
        gt -j {threads} suffixerator \
        -db {input.fa:q} \
        -indexname {params.db_dir:q}/{wildcards.genome:q}/{wildcards.genome:q} \
        {params.suffix_params}
        """


rule ltr_index_generator:
    input:
        idx = expand(os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.{ext}'),
                     genome=defaults.SPECIES,
                     ext=LTR_INDEX_EXT)


rule ltr_harvester_setup:
    input:
        rules.ltr_index_generator_setup.output
    output:
        ltr_fasta = os.path.join(defaults.LTRHARVEST_DIR, '{genome}.fa'),
        ltr_gff3 = os.path.join(defaults.LTRHARVEST_DIR, '{genome}.gff3'),
        ltr_sorted_gff3 = os.path.join(defaults.LTRHARVEST_DIR, '{genome}_sorted.gff3')
    params:
        index_directory_path=defaults.SPECIES_DB,
        output_directory_path=os.path.join(defaults.LTRHARVEST_DIR)
    shell:
        '''
        TMPDIR=$(mktemp -d /tmp/ltrharvest_{wildcards.genome}_XXXXXX) && \
        gt ltrharvest \
        -seqids \
        -index {params.index_directory_path:q}/{wildcards.genome:q}/{wildcards.genome:q} \
        -out {params.output_directory_path:q}/{wildcards.genome:q}.fa \
        -gff3 {params.output_directory_path:q}/{wildcards.genome:q}.gff3 && \
        gt gff3 -sort {params.output_directory_path:q}/{wildcards.genome:q}.gff3 \
        > {params.output_directory_path:q}/{wildcards.genome:q}_sorted.gff3
        '''


rule ltr_harvester:
    input:
        ltr_files = expand(os.path.join(defaults.LTRHARVEST_DIR, '{genome}.{ext}'),
                           genome=defaults.SPECIES,
                           ext=['fa', 'gff3']),
        ltr_sorted_gff3 = expand(os.path.join(defaults.LTRHARVEST_DIR, '{genome}_sorted.{ext}'),
                                 genome=defaults.SPECIES,
                                 ext=['gff3'])


rule ltr_digester_setup:
    input:
        ltrharvest_output=rules.ltr_harvester_setup.output.ltr_sorted_gff3,
        pfam_database=rules.pfam_hmm_downloader.output
    output:
        ltr_gff3 = os.path.join(defaults.LTRDIGEST_DIR, '{genome}.gff3'),
    params:
        ltr_harvest_path=defaults.LTRHARVEST_DIR,
        hmm_profile_path=defaults.HMM_PROFILE_DIR,
        index_directory_path=defaults.SPECIES_DB,
        output_directory_path=defaults.LTRDIGEST_DIR
    shell:
        '''
        echo "Running LTRDigest for {wildcards.genome:q}" && \
        TMPDIR=$(mktemp -d /tmp/ltrdigest_{wildcards.genome}_XXXXXX) && \
        gt ltrdigest \
        -v -matchdescstart \
        -seqfile {params.index_directory_path:q}/{wildcards.genome:q}.fa \
        -hmms {params.hmm_profile_path:q}/Pfam-A.hmm -- \
        {params.ltr_harvest_path:q}/{wildcards.genome:q}_sorted.gff3 \
        {params.index_directory_path:q}/{wildcards.genome:q}/{wildcards.genome:q} \
        > {params.output_directory_path:q}/{wildcards.genome:q}.gff3 && \
        echo "Completed running LTRDigest for {wildcards.genome:q}"
        '''


rule ltr_digester:
    input:
        ltr_files = expand(os.path.join(defaults.LTRDIGEST_DIR, '{genome}.{ext}'),
                           genome=defaults.SPECIES, ext=['gff3']),


rule probe_extractor:
    input:
        probe_table=os.path.join(defaults.TABLE_INPUT_DIR, 'probes.csv')
    output:
        probe_pkl=os.path.join(defaults.PICKLE_DIR, 'probe_dict.pkl')
    threads:
        workflow.cores
    shell:
        'python probe_extractor.py && python obj2dict.py --file probe_dict.pkl'


rule full_genome_blaster_setup:
    input:
        input_pkl = rules.probe_extractor.output.probe_pkl,
        blast_db = expand(os.path.join(defaults.SPECIES_DB, '{genome}', '{genome}.{ext}'),
                          genome=defaults.SPECIES, ext=BLAST_DB_EXT)
    output:
        pkl = os.path.join(defaults.PICKLE_DIR, 'full_genome_blast.pkl'),
        csv = os.path.join(defaults.TABLE_OUTPUT_DIR, 'full_genome_blast.csv'),
        parquet = os.path.join(defaults.TABLE_OUTPUT_DIR, 'full_genome_blast.parquet')
    threads:
        workflow.cores
    shell:
        'python full_genome_blaster.py && python obj2dict.py --file full_genome_blast.pkl'


rule full_genome_blaster:
    input:
        rules.full_genome_blaster_setup.output


rule species_segmenter_setup:
    input:
        input_parquet = rules.full_genome_blaster_setup.output.parquet,
    output:
        all_parquet=expand(os.path.join(defaults.SEGMENTED_SPECIES_DIR, 'all_{suffix}.parquet'),
                           suffix=['main', 'accessory']),
        species_parquet=expand(os.path.join(defaults.SEGMENTED_SPECIES_DIR, '{genome}_{suffix}.parquet'),
                               genome=defaults.SPECIES, suffix=['full', 'main', 'accessory']),
    params:
        output_dir = defaults.SEGMENTED_SPECIES_DIR
    shell:
        'Rscript species_segmenter.R {input.input_parquet:q} {params.output_dir:q}'


rule species_segmenter:
    input:
        rules.species_segmenter_setup.output


rule ranges_analysis_main_setup:
    input:
        original_fasta=expand(os.path.join(defaults.SPECIES_DB, '{genome}.fa'), genome=defaults.SPECIES),
        species_segmented=expand(os.path.join(defaults.SEGMENTED_SPECIES_DIR, '{genome}_main.parquet'),
                                 genome=defaults.SPECIES),
        ltr_gff3 = expand(os.path.join(defaults.LTRDIGEST_DIR, '{genome}.gff3'),
                          genome=defaults.SPECIES)
    output:
        original_tracks=os.path.join(defaults.TRACK_ORIGINAL_DIR,'{genome}_main.gff3'),
        candidate_tracks=os.path.join(defaults.TRACK_CANDIDATES_DIR,'{genome}_main.gff3'),
        validated_tracks=os.path.join(defaults.TRACK_VALIDATED_DIR,'{genome}_main.gff3'),
        overlap_matrix=os.path.join(defaults.TABLE_OVERLAP_MATRIX_DIR,'{genome}_main.csv'),
        plot_dataframes=os.path.join(defaults.PLOT_DATAFRAMES_DIR,'{genome}_main.parquet'),
    params:
        species_db=defaults.SPECIES_DB,
        segmented_species_dir=defaults.SEGMENTED_SPECIES_DIR,
        probes_dir=defaults.TABLE_INPUT_DIR,
        plot_dataframes_dir=defaults.PLOT_DATAFRAMES_DIR,
        ltr_digest_dir=defaults.LTRDIGEST_DIR,
        original_tracks_dir=defaults.TRACK_ORIGINAL_DIR,
        candidate_tracks_dir=defaults.TRACK_CANDIDATES_DIR,
        validated_tracks_dir=defaults.TRACK_VALIDATED_DIR,
        overlap_matrix_dir=defaults.TABLE_OVERLAP_MATRIX_DIR,
        bitscore_threshold=config.get('bitscore_threshold',0),
        identity_threshold=config.get('identity_threshold',0),
        ltr_resize=config.get('ltr_resize',0)
    shell:
        '''
        Rscript ranges_analysis.R \
        {params.species_db:q}/{wildcards.genome:q}.fa \
        {params.segmented_species_dir:q}/{wildcards.genome:q}_main.parquet \
        {params.ltr_digest_dir:q}/{wildcards.genome:q}.gff3 \
        {params.probes_dir:q}/probes.csv \
        {params.ltr_resize:q} \
        {params.bitscore_threshold:q} \
        {params.identity_threshold:q} \
        {params.original_tracks_dir:q}/{wildcards.genome:q}_main.gff3 \
        {params.candidate_tracks_dir:q}/{wildcards.genome:q}_main.gff3 \
        {params.validated_tracks_dir:q}/{wildcards.genome:q}_main.gff3 \
        {params.overlap_matrix_dir:q}/{wildcards.genome:q}_main.csv \
        {params.plot_dataframes_dir:q}/{wildcards.genome:q}_main.parquet
        '''


rule ranges_analysis_accessory_setup:
    input:
        original_fasta=expand(os.path.join(defaults.SPECIES_DB, '{genome}.fa'), genome=defaults.SPECIES),
        species_segmented=expand(os.path.join(defaults.SEGMENTED_SPECIES_DIR, '{genome}_accessory.parquet'),
                                 genome=defaults.SPECIES),
        ltr_gff3 = expand(os.path.join(defaults.LTRDIGEST_DIR, '{genome}.gff3'),
                          genome=defaults.SPECIES)
    output:
        original_tracks=os.path.join(defaults.TRACK_ORIGINAL_DIR,'{genome}_accessory.gff3'),
        candidate_tracks=os.path.join(defaults.TRACK_CANDIDATES_DIR,'{genome}_accessory.gff3'),
        overlap_matrix=os.path.join(defaults.TABLE_OVERLAP_MATRIX_DIR,'{genome}_accessory.csv'),
        plot_dataframes=os.path.join(defaults.PLOT_DATAFRAMES_DIR,'{genome}_accessory.parquet'),
    params:
        species_db=defaults.SPECIES_DB,
        segmented_species_dir=defaults.SEGMENTED_SPECIES_DIR,
        probes_dir=defaults.TABLE_INPUT_DIR,
        plot_dataframes_dir=defaults.PLOT_DATAFRAMES_DIR,
        ltr_digest_dir=defaults.LTRDIGEST_DIR,
        original_tracks_dir=defaults.TRACK_ORIGINAL_DIR,
        candidate_tracks_dir=defaults.TRACK_CANDIDATES_DIR,
        validated_tracks_dir=defaults.TRACK_VALIDATED_DIR,
        overlap_matrix_dir=defaults.TABLE_OVERLAP_MATRIX_DIR,
        bitscore_threshold=config.get('bitscore_threshold',0),
        identity_threshold=config.get('identity_threshold',0),
        ltr_resize=config.get('ltr_resize',0)
    shell:
        '''
        Rscript ranges_analysis.R \
        {params.species_db:q}/{wildcards.genome:q}.fa \
        {params.segmented_species_dir:q}/{wildcards.genome:q}_accessory.parquet \
        {params.ltr_digest_dir:q}/{wildcards.genome:q}.gff3 \
        {params.probes_dir:q}/probes.csv \
        {params.ltr_resize:q} \
        {params.bitscore_threshold:q} \
        {params.identity_threshold:q} \
        {params.original_tracks_dir:q}/{wildcards.genome:q}_accessory.gff3 \
        {params.candidate_tracks_dir:q}/{wildcards.genome:q}_accessory.gff3 \
        {params.validated_tracks_dir:q}/{wildcards.genome:q}_accessory.gff3 \
        {params.overlap_matrix_dir:q}/{wildcards.genome:q}_accessory.csv \
        {params.plot_dataframes_dir:q}/{wildcards.genome:q}_accessory.parquet
        '''

rule ranges_analysis:
    input:
        original_tracks=expand(os.path.join(defaults.TRACK_ORIGINAL_DIR,'{genome}_{suffix}.gff3'),
                               genome=defaults.SPECIES,
                               suffix=['main', 'accessory']),
        candidate_tracks=expand(os.path.join(defaults.TRACK_CANDIDATES_DIR,'{genome}_{suffix}.gff3'),
                                genome=defaults.SPECIES,
                                suffix=['main', 'accessory']),
        validated_tracks=expand(os.path.join(defaults.TRACK_VALIDATED_DIR,'{genome}_main.gff3'),
                                genome=defaults.SPECIES),
        overlap_matrix=expand(os.path.join(defaults.TABLE_OVERLAP_MATRIX_DIR,'{genome}_{suffix}.csv'),
                              genome=defaults.SPECIES,
                              suffix=['main', 'accessory']),
        plot_dataframes=expand(os.path.join(defaults.PLOT_DATAFRAMES_DIR,'{genome}_{suffix}.parquet'),
                               genome=defaults.SPECIES,
                               suffix=['main', 'accessory']),


rule plot_generator_setup:
    input:
        plot_dataframes=expand(os.path.join(defaults.PLOT_DATAFRAMES_DIR,'{genome}_{suffix}.parquet'),
                               genome=defaults.SPECIES, suffix=['main','accessory']),
    output:
        density_plots=expand(os.path.join(defaults.PLOT_DIR,'{density_probe}_density.png'),
                             density_probe=['main','accessory']),
        raincloud_plots=expand(os.path.join(defaults.PLOT_DIR,'{raincloud_probe}_raincloud.png'),
                               raincloud_probe=['main','accessory']),
        bar_plots=expand(os.path.join(defaults.PLOT_DIR,'{bar_probe}_bar.png'),
                         bar_probe=['full', 'main','accessory']),
        sankey_plots=expand(os.path.join(defaults.PLOT_DIR,'{sankey_probe}_sankey_{plot_type}.png'),
                            sankey_probe=['main','accessory'], plot_type=['a', 'b', 'c']),
        balloon_plots=expand(os.path.join(defaults.PLOT_DIR,'{balloon_probe}_balloon.png'),
                             balloon_probe=['main','accessory'])
    params:
        plot_dataframes_dir=defaults.PLOT_DATAFRAMES_DIR,
        plot_dir=defaults.PLOT_DIR,
        filter_threshold=config.get('filter_threshold',0.005)
    threads:
        workflow.cores
    shell:
        '''
        Rscript plot2sort.R \
        {params.plot_dataframes_dir:q} \
        {params.plot_dir:q} \
        {params.filter_threshold:q}
        '''


rule plot_generator:
    input:
        plots=rules.plot_generator_setup.output


rule circle_plot_generator_setup:
    input:
        fasta=os.path.join(defaults.SPECIES_DB, '{genome}.fa'),
        hits= os.path.join(defaults.TRACK_VALIDATED_DIR, '{genome}_main.gff3'),
        ltrdigest=os.path.join(defaults.LTRDIGEST_DIR, '{genome}.gff3'),
    output:
        circle_plot_png=os.path.join(defaults.CIRCLE_PLOT_DIR, '{genome}.png'),
        circle_plot_pdf=os.path.join(defaults.CIRCLE_PLOT_DIR, '{genome}.pdf')

    params:
        species_db=defaults.SPECIES_DB,
        ltrdigest_dir=defaults.LTRDIGEST_DIR,
        validated_tracks_dir=defaults.TRACK_VALIDATED_DIR,
        circle_plot_dir=defaults.CIRCLE_PLOT_DIR,
        bitscore_threshold=config.get('circle_plot_bitscore_threshold',0),
    threads:
        workflow.cores
    shell:
        '''
        Rscript circle_plot_generator.R \
        {params.species_db:q}/{wildcards.genome:q}.fa \
        {params.validated_tracks_dir:q}/{wildcards.genome:q}_main.gff3 \
        {params.ltrdigest_dir:q}/{wildcards.genome:q}.gff3 \
        {params.bitscore_threshold:q} \
        {params.circle_plot_dir:q}/{wildcards.genome:q}
        '''

rule circle_plot_generator:
    input:
        circle_plots=expand(os.path.join(defaults.CIRCLE_PLOT_DIR, '{genome}.png'),genome=defaults.SPECIES)
